{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask, session\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom flask_login import LoginManager\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.utils import secure_filename\n\n# Configure logging for debugging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif not database_url or \"ep-calm-shadow-a5nmejk6.us-east-2.aws.neon.tech\" in database_url:\n    # Fallback to SQLite if PostgreSQL is not available or using disabled Neon endpoint\n    database_url = \"sqlite:///nc_glamourstore.db\"\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {}\nelse:\n    app.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\n    app.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n        \"pool_recycle\": 300,\n        \"pool_pre_ping\": True,\n    }\n\n# Configure upload settings\napp.config['UPLOAD_FOLDER'] = 'static/images/products'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = \"admin_login\"  # type: ignore\nlogin_manager.login_message = \"Por favor, faça login para acessar esta página.\"\n\n# Initialize session cart if not exists\n@app.before_request\ndef init_cart():\n    if 'cart' not in session:\n        session['cart'] = {}\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    from models import User, Product, Order, OrderItem, Category\n    \n    # Create all tables\n    db.create_all()\n    \n    # Initialize default data\n    from database import init_default_data\n    init_default_data()\n\n# Flask-Login user loader\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\n# Import routes\nfrom routes import *\n\n\n","size_bytes":2427},"database.py":{"content":"from app import db\nfrom models import User, Product, Order, OrderItem, Category, BankDetails\nfrom sqlalchemy import func\n\ndef init_default_data():\n    \"\"\"Initialize default data for the application\"\"\"\n    try:\n        # Insert default categories\n        categories = [\n            'Acessórios', 'Bolsas', 'Calçados Femininos', 'Calçados Infantis',\n            'Cosméticos', 'Produtos e acessórios de cabelo', 'Roupas Femininas'\n        ]\n        \n        for category_name in categories:\n            if not Category.query.filter_by(name=category_name).first():\n                category = Category(name=category_name)\n                db.session.add(category)\n        \n        # Insert default admin user (username: admin, password: admin123)\n        if not User.query.filter_by(username='admin').first():\n            admin_user = User(\n                username='admin',\n                email='admin@ncglamourstore.com'\n            )\n            admin_user.set_password('admin123')\n            db.session.add(admin_user)\n        \n        # Add default products if none exist\n        if Product.query.count() == 0:\n            default_products = [\n                # Cosméticos\n                {\n                    'name': 'Fantasy de Britney Spears',\n                    'price': 45000.00,\n                    'category': 'Cosméticos',\n                    'description': 'Perfume feminino Fantasy de Britney Spears, fragância doce e envolvente.',\n                    'stock_quantity': 10\n                },\n                {\n                    'name': 'Água de colônia Oásis de ameixa',\n                    'price': 4000.00,\n                    'category': 'Cosméticos',\n                    'description': 'Água de colônia com fragrância fresca de ameixa.',\n                    'stock_quantity': 25\n                },\n                {\n                    'name': 'Batom Matte Vermelho',\n                    'price': 8500.00,\n                    'category': 'Cosméticos',\n                    'description': 'Batom matte de longa duração na cor vermelho clássico.',\n                    'stock_quantity': 15\n                },\n                {\n                    'name': 'Base Líquida Natural',\n                    'price': 12000.00,\n                    'category': 'Cosméticos',\n                    'description': 'Base líquida com cobertura natural e acabamento sedoso.',\n                    'stock_quantity': 20\n                },\n                {\n                    'name': 'Máscara de Cílios Volume',\n                    'price': 15000.00,\n                    'category': 'Cosméticos',\n                    'description': 'Máscara para cílios que proporciona volume e alongamento.',\n                    'stock_quantity': 18\n                },\n                \n                # Calçados Femininos\n                {\n                    'name': 'Bota Salto',\n                    'price': 10000.00,\n                    'category': 'Calçados Femininos',\n                    'description': 'Bota elegante com salto médio, ideal para ocasiões especiais.',\n                    'stock_quantity': 12\n                },\n                {\n                    'name': 'Sandália Elegante',\n                    'price': 8500.00,\n                    'category': 'Calçados Femininos',\n                    'description': 'Sandália feminina elegante para eventos e festas.',\n                    'stock_quantity': 15\n                },\n                {\n                    'name': 'Tênis Casual Branco',\n                    'price': 12500.00,\n                    'category': 'Calçados Femininos',\n                    'description': 'Tênis branco casual confortável para o dia a dia.',\n                    'stock_quantity': 20\n                },\n                {\n                    'name': 'Sapato Social Feminino',\n                    'price': 14000.00,\n                    'category': 'Calçados Femininos',\n                    'description': 'Sapato social feminino para ambiente profissional.',\n                    'stock_quantity': 10\n                },\n                \n                # Roupas Femininas\n                {\n                    'name': 'Calça Leggings Jeans',\n                    'price': 10300.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Calça leggings com design jeans, confortável e estilosa.',\n                    'stock_quantity': 25\n                },\n                {\n                    'name': 'Calça Simples Jeans',\n                    'price': 10000.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Calça jeans clássica de corte simples e versátil.',\n                    'stock_quantity': 30\n                },\n                {\n                    'name': 'Calção Listrado',\n                    'price': 3800.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Calção listrado leve e confortável para o verão.',\n                    'stock_quantity': 22\n                },\n                {\n                    'name': 'Calça Cintura Subida Flare',\n                    'price': 15960.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Calça de cintura alta com corte flare, muito elegante.',\n                    'stock_quantity': 18\n                },\n                {\n                    'name': 'Calças Estampadas',\n                    'price': 14500.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Calças com estampas modernas e coloridas.',\n                    'stock_quantity': 16\n                },\n                {\n                    'name': 'Vestido Casual Verão',\n                    'price': 18000.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Vestido casual perfeito para os dias quentes de verão.',\n                    'stock_quantity': 14\n                },\n                {\n                    'name': 'Blusa Social Feminina',\n                    'price': 12500.00,\n                    'category': 'Roupas Femininas',\n                    'description': 'Blusa social feminina para ambiente profissional.',\n                    'stock_quantity': 20\n                },\n                \n                # Bolsas\n                {\n                    'name': 'Bolsa de Mão Couro',\n                    'price': 25000.00,\n                    'category': 'Bolsas',\n                    'description': 'Bolsa de mão em couro legítimo, elegante e durável.',\n                    'stock_quantity': 8\n                },\n                {\n                    'name': 'Carteira Feminina Elegante',\n                    'price': 8500.00,\n                    'category': 'Bolsas',\n                    'description': 'Carteira feminina com design elegante e múltiplos compartimentos.',\n                    'stock_quantity': 25\n                },\n                {\n                    'name': 'Mochila Casual Urbana',\n                    'price': 15000.00,\n                    'category': 'Bolsas',\n                    'description': 'Mochila urbana casual com design moderno.',\n                    'stock_quantity': 12\n                },\n                {\n                    'name': 'Bolsa Tiracolo Moderna',\n                    'price': 18500.00,\n                    'category': 'Bolsas',\n                    'description': 'Bolsa tiracolo com design moderno e funcional.',\n                    'stock_quantity': 15\n                },\n                \n                # Acessórios\n                {\n                    'name': 'Colar Dourado Delicado',\n                    'price': 12000.00,\n                    'category': 'Acessórios',\n                    'description': 'Colar dourado delicado para ocasiões especiais.',\n                    'stock_quantity': 20\n                },\n                {\n                    'name': 'Brincos Pérola Clássicos',\n                    'price': 15500.00,\n                    'category': 'Acessórios',\n                    'description': 'Brincos de pérola clássicos e elegantes.',\n                    'stock_quantity': 18\n                },\n                {\n                    'name': 'Relógio Feminino Elegante',\n                    'price': 35000.00,\n                    'category': 'Acessórios',\n                    'description': 'Relógio feminino elegante com pulseira de couro.',\n                    'stock_quantity': 10\n                },\n                {\n                    'name': 'Óculos de Sol Fashion',\n                    'price': 22000.00,\n                    'category': 'Acessórios',\n                    'description': 'Óculos de sol com design fashion e proteção UV.',\n                    'stock_quantity': 12\n                },\n                \n                # Calçados Infantis\n                {\n                    'name': 'Tênis Infantil Colorido',\n                    'price': 8500.00,\n                    'category': 'Calçados Infantis',\n                    'description': 'Tênis colorido e confortável para crianças.',\n                    'stock_quantity': 20\n                },\n                {\n                    'name': 'Sandália Infantil Confortável',\n                    'price': 6500.00,\n                    'category': 'Calçados Infantis',\n                    'description': 'Sandália infantil confortável para uso diário.',\n                    'stock_quantity': 25\n                },\n                {\n                    'name': 'Sapatinho de Bebê',\n                    'price': 4500.00,\n                    'category': 'Calçados Infantis',\n                    'description': 'Sapatinho macio e seguro para bebês.',\n                    'stock_quantity': 30\n                },\n                \n                # Produtos e acessórios de cabelo\n                {\n                    'name': 'Shampoo Nutritivo 500ml',\n                    'price': 9500.00,\n                    'category': 'Produtos e acessórios de cabelo',\n                    'description': 'Shampoo nutritivo que fortalece e hidrata os cabelos.',\n                    'stock_quantity': 40\n                },\n                {\n                    'name': 'Condicionador Hidratante',\n                    'price': 8500.00,\n                    'category': 'Produtos e acessórios de cabelo',\n                    'description': 'Condicionador hidratante para cabelos macios e sedosos.',\n                    'stock_quantity': 35\n                },\n                {\n                    'name': 'Escova de Cabelo Premium',\n                    'price': 12000.00,\n                    'category': 'Produtos e acessórios de cabelo',\n                    'description': 'Escova de cabelo premium com cerdas naturais.',\n                    'stock_quantity': 15\n                },\n                {\n                    'name': 'Presilhas Decorativas Kit',\n                    'price': 5500.00,\n                    'category': 'Produtos e acessórios de cabelo',\n                    'description': 'Kit com presilhas decorativas variadas para cabelos.',\n                    'stock_quantity': 50\n                },\n                {\n                    'name': 'Óleo Capilar Reparador',\n                    'price': 15500.00,\n                    'category': 'Produtos e acessórios de cabelo',\n                    'description': 'Óleo capilar reparador para cabelos danificados.',\n                    'stock_quantity': 20\n                }\n            ]\n            \n            for product_data in default_products:\n                product = Product(**product_data)\n                db.session.add(product)\n        \n        # Add default bank details if none exist\n        if BankDetails.query.count() == 0:\n            default_bank = BankDetails(\n                bank_name='Banco Económico',\n                iban='AO06 0058 0000 1234 5678 9012 3',\n                account_number='123456789',\n                account_holder='NC Glamour Store, Lda',\n                nif='5417022456',\n                is_active=True\n            )\n            db.session.add(default_bank)\n        \n        db.session.commit()\n        print(\"Default data initialized successfully!\")\n        \n    except Exception as e:\n        print(f\"Error initializing default data: {e}\")\n        db.session.rollback()\n\ndef get_products(page=1, per_page=10):\n    \"\"\"Get products from database with pagination\"\"\"\n    try:\n        products_pagination = Product.query.order_by(Product.created_at.desc()).paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        \n        products = [\n            {\n                'id': p.id,\n                'name': p.name,\n                'price': float(p.price),\n                'category': p.category,\n                'image_url': p.image_url,\n                'description': p.description,\n                'stock_quantity': p.stock_quantity,\n                'is_active': p.is_active,\n                'created_at': p.created_at,\n                'updated_at': p.updated_at\n            }\n            for p in products_pagination.items\n        ]\n        \n        return {\n            'products': products,\n            'pagination': {\n                'page': products_pagination.page,\n                'pages': products_pagination.pages,\n                'per_page': products_pagination.per_page,\n                'total': products_pagination.total,\n                'has_prev': products_pagination.has_prev,\n                'has_next': products_pagination.has_next,\n                'prev_num': products_pagination.prev_num,\n                'next_num': products_pagination.next_num\n            }\n        }\n    except Exception as e:\n        print(f\"Error getting products: {e}\")\n        return {\n            'products': [],\n            'pagination': {\n                'page': 1,\n                'pages': 1,\n                'per_page': per_page,\n                'total': 0,\n                'has_prev': False,\n                'has_next': False,\n                'prev_num': None,\n                'next_num': None\n            }\n        }\n\ndef get_orders(page=1, per_page=10):\n    \"\"\"Get orders from database with pagination\"\"\"\n    try:\n        orders_pagination = Order.query.order_by(Order.created_at.desc()).paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n        \n        result = []\n        for order in orders_pagination.items:\n            total_items = len(order.items)\n            items_summary = ', '.join([f\"{item.quantity}x {item.product_name}\" for item in order.items])\n            \n            result.append({\n                'id': order.id,\n                'customer_name': order.customer_name,\n                'customer_phone': order.customer_phone,\n                'customer_email': order.customer_email,\n                'customer_nif': order.customer_nif,\n                'delivery_method': order.delivery_method,\n                'payment_method': order.payment_method,\n                'total_amount': float(order.total_amount),\n                'status': order.status,\n                'delivery_address': order.delivery_address,\n                'observations': order.observations,\n                'created_at': order.created_at,\n                'updated_at': order.updated_at,\n                'total_items': total_items,\n                'items_summary': items_summary\n            })\n        \n        return {\n            'orders': result,\n            'pagination': {\n                'page': orders_pagination.page,\n                'pages': orders_pagination.pages,\n                'per_page': orders_pagination.per_page,\n                'total': orders_pagination.total,\n                'has_prev': orders_pagination.has_prev,\n                'has_next': orders_pagination.has_next,\n                'prev_num': orders_pagination.prev_num,\n                'next_num': orders_pagination.next_num\n            }\n        }\n    except Exception as e:\n        print(f\"Error getting orders: {e}\")\n        return {\n            'orders': [],\n            'pagination': {\n                'page': 1,\n                'pages': 1,\n                'per_page': per_page,\n                'total': 0,\n                'has_prev': False,\n                'has_next': False,\n                'prev_num': None,\n                'next_num': None\n            }\n        }\n\ndef get_categories():\n    \"\"\"Get all categories from database\"\"\"\n    try:\n        categories = Category.query.order_by(Category.name).all()\n        return [\n            {\n                'id': c.id,\n                'name': c.name,\n                'description': c.description,\n                'is_active': c.is_active,\n                'created_at': c.created_at\n            }\n            for c in categories\n        ]\n    except Exception as e:\n        print(f\"Error getting categories: {e}\")\n        return []\n\ndef add_product(name, price, category, image_url=\"\", description=\"\", stock_quantity=0):\n    \"\"\"Add a new product to database\"\"\"\n    try:\n        product = Product(\n            name=name,\n            price=price,\n            category=category,\n            image_url=image_url,\n            description=description,\n            stock_quantity=stock_quantity\n        )\n        db.session.add(product)\n        db.session.commit()\n        return product.id\n    except Exception as e:\n        print(f\"Error adding product: {e}\")\n        db.session.rollback()\n        return None\n\ndef update_product(product_id, name, price, category, image_url=\"\", description=\"\", stock_quantity=0, is_active=True):\n    \"\"\"Update a product in database\"\"\"\n    try:\n        product = Product.query.get(product_id)\n        if product:\n            product.name = name\n            product.price = price\n            product.category = category\n            product.image_url = image_url\n            product.description = description\n            product.stock_quantity = stock_quantity\n            product.is_active = is_active\n            db.session.commit()\n            return True\n        return False\n    except Exception as e:\n        print(f\"Error updating product: {e}\")\n        db.session.rollback()\n        return False\n\ndef delete_product(product_id):\n    \"\"\"Delete a product from database\"\"\"\n    try:\n        product = Product.query.get(product_id)\n        if product:\n            db.session.delete(product)\n            db.session.commit()\n            return True\n        return False\n    except Exception as e:\n        print(f\"Error deleting product: {e}\")\n        db.session.rollback()\n        return False\n\ndef get_product_by_id(product_id):\n    \"\"\"Get a specific product by ID\"\"\"\n    try:\n        product = Product.query.get(product_id)\n        if product:\n            return {\n                'id': product.id,\n                'name': product.name,\n                'price': float(product.price),\n                'category': product.category,\n                'image_url': product.image_url,\n                'description': product.description,\n                'stock_quantity': product.stock_quantity,\n                'is_active': product.is_active,\n                'created_at': product.created_at,\n                'updated_at': product.updated_at\n            }\n        return None\n    except Exception as e:\n        print(f\"Error getting product: {e}\")\n        return None\n\ndef update_order_status(order_id, status):\n    \"\"\"Update order status\"\"\"\n    try:\n        order = Order.query.get(order_id)\n        if order:\n            order.status = status\n            db.session.commit()\n            return True\n        return False\n    except Exception as e:\n        print(f\"Error updating order status: {e}\")\n        db.session.rollback()\n        return False\n\ndef delete_order(order_id):\n    \"\"\"Delete an order and its items from database\"\"\"\n    try:\n        order = Order.query.get(order_id)\n        if order:\n            # Delete all order items first\n            for item in order.items:\n                db.session.delete(item)\n            # Delete the order\n            db.session.delete(order)\n            db.session.commit()\n            return True\n        return False\n    except Exception as e:\n        print(f\"Error deleting order: {e}\")\n        db.session.rollback()\n        return False\n\ndef get_dashboard_stats():\n    \"\"\"Get dashboard statistics\"\"\"\n    try:\n        # Get total products\n        total_products = Product.query.filter_by(is_active=True).count()\n        \n        # Get total orders\n        total_orders = Order.query.count()\n        \n        # Get pending orders\n        pending_orders = Order.query.filter_by(status='pending').count()\n        \n        # Get total sales (only delivered orders)\n        total_sales = db.session.query(func.coalesce(func.sum(Order.total_amount), 0)).filter(\n            Order.status == 'delivered'\n        ).scalar()\n        \n        # Get recent orders\n        recent_orders_query = Order.query.order_by(Order.created_at.desc()).limit(5).all()\n        recent_orders = [\n            {\n                'id': o.id,\n                'customer_name': o.customer_name,\n                'total_amount': float(o.total_amount),\n                'status': o.status,\n                'created_at': o.created_at.strftime('%Y-%m-%d') if o.created_at else 'N/A'\n            }\n            for o in recent_orders_query\n        ]\n        \n        return {\n            'total_products': total_products,\n            'total_orders': total_orders,\n            'pending_orders': pending_orders,\n            'total_sales': float(total_sales) if total_sales else 0,\n            'recent_orders': recent_orders\n        }\n    except Exception as e:\n        print(f\"Error getting dashboard stats: {e}\")\n        return {\n            'total_products': 0,\n            'total_orders': 0,\n            'pending_orders': 0,\n            'total_sales': 0,\n            'recent_orders': []\n        }\n\ndef get_bank_details():\n    \"\"\"Get active bank details\"\"\"\n    try:\n        bank_details = BankDetails.query.filter_by(is_active=True).first()\n        if bank_details:\n            return {\n                'id': bank_details.id,\n                'bank_name': bank_details.bank_name,\n                'iban': bank_details.iban,\n                'account_number': bank_details.account_number,\n                'account_holder': bank_details.account_holder,\n                'nif': bank_details.nif,\n                'is_active': bank_details.is_active,\n                'created_at': bank_details.created_at,\n                'updated_at': bank_details.updated_at\n            }\n        return None\n    except Exception as e:\n        print(f\"Error getting bank details: {e}\")\n        return None\n\ndef update_bank_details(bank_name, iban, account_number, account_holder, nif):\n    \"\"\"Update bank details\"\"\"\n    try:\n        # Get existing bank details or create new one\n        bank_details = BankDetails.query.filter_by(is_active=True).first()\n        if bank_details:\n            bank_details.bank_name = bank_name\n            bank_details.iban = iban\n            bank_details.account_number = account_number\n            bank_details.account_holder = account_holder\n            bank_details.nif = nif\n        else:\n            bank_details = BankDetails(\n                bank_name=bank_name,\n                iban=iban,\n                account_number=account_number,\n                account_holder=account_holder,\n                nif=nif,\n                is_active=True\n            )\n            db.session.add(bank_details)\n        \n        db.session.commit()\n        return True\n    except Exception as e:\n        print(f\"Error updating bank details: {e}\")\n        db.session.rollback()\n        return False","size_bytes":23720},"main.py":{"content":"from app import app\n","size_bytes":20},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom datetime import datetime\nfrom sqlalchemy import Text\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'admin_users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Category(db.Model):\n    __tablename__ = 'categories'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    description = db.Column(Text)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Product(db.Model):\n    __tablename__ = 'products'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    price = db.Column(db.Numeric(10, 2), nullable=False)\n    category = db.Column(db.String(100), nullable=False)\n    image_url = db.Column(db.String(500))\n    description = db.Column(Text)\n    stock_quantity = db.Column(db.Integer, default=0)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass Order(db.Model):\n    __tablename__ = 'orders'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    customer_name = db.Column(db.String(200), nullable=False)\n    customer_phone = db.Column(db.String(50), nullable=False)\n    customer_email = db.Column(db.String(120), nullable=False)\n    customer_nif = db.Column(db.String(50))\n    delivery_method = db.Column(db.String(20), nullable=False)  # 'pickup' or 'home_delivery'\n    payment_method = db.Column(db.String(50), nullable=False)\n    total_amount = db.Column(db.Numeric(10, 2), nullable=False)\n    status = db.Column(db.String(20), default='pending')  # pending, confirmed, processing, shipped, delivered, cancelled\n    delivery_address = db.Column(Text)\n    observations = db.Column(Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    items = db.relationship('OrderItem', backref='order', lazy=True, cascade='all, delete-orphan')\n\nclass OrderItem(db.Model):\n    __tablename__ = 'order_items'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    order_id = db.Column(db.Integer, db.ForeignKey('orders.id'), nullable=False)\n    product_id = db.Column(db.Integer, nullable=False)\n    product_name = db.Column(db.String(200), nullable=False)\n    product_price = db.Column(db.Numeric(10, 2), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n    subtotal = db.Column(db.Numeric(10, 2), nullable=False)\n\nclass BankDetails(db.Model):\n    __tablename__ = 'bank_details'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    bank_name = db.Column(db.String(200), nullable=False)\n    iban = db.Column(db.String(50), nullable=False)\n    account_number = db.Column(db.String(50), nullable=False)\n    account_holder = db.Column(db.String(200), nullable=False)\n    nif = db.Column(db.String(50), nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)","size_bytes":3869},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"werkzeug>=3.1.3\",\n    \"pymysql>=1.1.1\",\n    \"sqlalchemy>=2.0.42\",\n]\n","size_bytes":377},"replit.md":{"content":"# Overview\n\nNc Glamourstore é uma aplicação web de e-commerce baseada em Flask para uma loja online especializada em moda feminina, calçados, acessórios e produtos de beleza. A aplicação oferece uma experiência completa de navegação no catálogo com funcionalidade de carrinho de compras, incluindo produtos em categorias como cosméticos, roupas femininas, calçados, bolsas e acessórios. O sistema usa gerenciamento de carrinho baseado em sessões, inclui busca e filtragem por categoria, paginação de produtos, e processo de finalização de compra com formulário de dados pessoais. TESTE\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nLast updated: August 11, 2025\n\n## Recent Updates\n- ✅ Migrated from Replit Agent to standard Replit environment\n- ✅ Converted SQLite to PostgreSQL database\n- ✅ Added all 32 products to admin panel management\n- ✅ Implemented image upload functionality (replaces URL-based images)\n- ✅ Applied new e-commerce color palette based on brand logo\n- ✅ Added circular logo to navigation and admin panels\n- ✅ Created comprehensive admin product management system\n\n# System Architecture\n\n## Frontend Architecture\n- **Template Engine**: Jinja2 templates with Flask's built-in templating\n- **UI Framework**: Bootstrap 5 for responsive design and component styling\n- **Static Assets**: Separate CSS and JavaScript files for custom styling and cart functionality\n- **Client-Side Enhancement**: Vanilla JavaScript for interactive cart features and visual feedback\n\n## Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy for database operations\n- **Session Management**: Flask's built-in session handling with server-side cart storage\n- **Authentication**: Flask-Login for admin panel user management with secure password hashing\n- **Application Structure**: Modular design with separated routes, database layer, and admin functionality\n- **Data Storage**: PostgreSQL database for scalable, production-ready data persistence\n- **Admin Panel**: Complete administrative interface with product management, image upload, and order tracking\n- **File Upload**: Secure image upload system with file validation and unique naming\n\n## Cart Management\n- **Storage Method**: Server-side sessions for cart persistence across requests\n- **Cart Operations**: Add, remove, update quantities, and clear entire cart functionality\n- **State Management**: Session initialization middleware ensures cart availability on all requests\n\n## Product Catalog\n- **Data Structure**: Expanded static product catalog with 32 products across all categories\n- **Product Attributes**: ID, name, price, category, and external image URLs\n- **Image Hosting**: External stock photos from Pixabay for product imagery\n- **Categories**: Complete category coverage - Acessórios, Bolsas, Calçados Femininos, Calçados Infantis, Cosméticos, Produtos e acessórios de cabelo, Roupas Femininas\n- **Pagination**: 8 products per page with navigation controls\n\n## Search and Filtering\n- **Search Implementation**: Server-side text matching against product names\n- **Category Filtering**: URL parameter-based category selection with scrollable category list\n- **Combined Filtering**: Support for simultaneous search and category filtering\n- **Pagination**: Smart pagination with ellipsis for large page counts\n\n## User Interface Enhancements\n- **Real-time Cart**: AJAX-powered shopping cart with instant updates without page reloads\n- **Quantity Selection**: Interactive +/- buttons for product quantity selection in both catalog and cart\n- **Cart Management**: Real-time quantity adjustments, item removal, and cart clearing with visual feedback\n- **Checkout Process**: Enhanced checkout flow with delivery address form and structured confirmation modal\n- **Delivery Address Form**: Angola-specific address format (Rua, Bairro, Cidade/Província, País) without postal codes\n- **Order Confirmation Modal**: Professional, structured modal replacing console alerts with complete order summary\n- **Dynamic Forms**: Conditional delivery address form that appears when \"Entrega numa morada\" is selected\n- **Footer**: Contact information including address, phone, email, and social links\n- **Responsive Design**: Mobile-optimized layout with Bootstrap 5 components\n- **Visual Feedback**: Success/error notifications, loading states, and smooth animations\n\n## Admin Panel Features\n- **Dashboard**: Overview with key statistics, recent orders, and quick actions\n- **Product Management**: Add, edit, delete, and manage product inventory with real-time preview\n- **Order Management**: View all orders, update status, and manage customer requests\n- **User Authentication**: Secure login system for admin access with Flask-Login\n- **Database Administration**: SQLite database with proper schema and data integrity\n- **Responsive Admin UI**: Bootstrap-based admin interface optimized for all devices\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap 5**: CSS framework for responsive design and UI components\n- **Font Awesome 6**: Icon library for user interface elements\n\n## Image Services\n- **Pixabay**: External image hosting service for product photography\n\n## Python Packages\n- **Flask**: Core web framework for application structure\n- **Flask-Login**: User authentication and session management for admin panel\n- **Werkzeug**: WSGI utilities including ProxyFix middleware for deployment\n- **SQLite3**: Built-in database engine for persistent data storage\n- **PyMySQL**: MySQL connector (configured but using SQLite for development)\n\n## Development Tools\n- **Python Logging**: Built-in logging module for debugging and monitoring\n- **Flask Debug Mode**: Development server with hot reloading capabilities\n\n## Deployment Considerations\n- **ProxyFix Middleware**: Configured for deployment behind reverse proxies\n- **Environment Variables**: Session secret key configuration for production security\n- **Static File Serving**: Flask's built-in static file handling for CSS and JavaScript assets","size_bytes":6042},"routes.py":{"content":"from flask import render_template, request, session, redirect, url_for, jsonify, flash\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom werkzeug.utils import secure_filename\nfrom app import app, allowed_file, db\nfrom database import get_dashboard_stats, get_products, get_orders, get_categories, add_product, update_product, delete_product, get_product_by_id, update_order_status, delete_order, get_bank_details, update_bank_details\nfrom models import User, Product, Order, OrderItem\nimport os\nimport uuid\n\n# Product data with stock photos - Expanded catalog\nPRODUCTS = [\n    # Cosméticos\n    {\n        'id': 1,\n        'name': 'Fantasy de Britney Spears',\n        'price': 45000.00,\n        'category': 'Cosméticos',\n        'image': 'https://cdn.pixabay.com/photo/2020/05/18/16/17/social-media-5187243_960_720.png'\n    },\n    {\n        'id': 2,\n        'name': 'Água de colônia Oásis de ameixa',\n        'price': 4000.00,\n        'category': 'Cosméticos',\n        'image': 'https://cdn.pixabay.com/photo/2017/09/07/08/54/money-2724241_960_720.jpg'\n    },\n    {\n        'id': 3,\n        'name': 'Batom Matte Vermelho',\n        'price': 8500.00,\n        'category': 'Cosméticos',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/12/51/makeup-1869435_960_720.jpg'\n    },\n    {\n        'id': 4,\n        'name': 'Base Líquida Natural',\n        'price': 12000.00,\n        'category': 'Cosméticos',\n        'image': 'https://cdn.pixabay.com/photo/2016/03/26/22/22/lipstick-1281570_960_720.jpg'\n    },\n    {\n        'id': 5,\n        'name': 'Máscara de Cílios Volume',\n        'price': 15000.00,\n        'category': 'Cosméticos',\n        'image': 'https://cdn.pixabay.com/photo/2017/07/31/22/05/makeup-2561516_960_720.jpg'\n    },\n    \n    # Calçados Femininos\n    {\n        'id': 6,\n        'name': 'Bota Salto',\n        'price': 10000.00,\n        'category': 'Calçados Femininos',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    {\n        'id': 7,\n        'name': 'Sandália Elegante',\n        'price': 8500.00,\n        'category': 'Calçados Femininos',\n        'image': 'https://cdn.pixabay.com/photo/2016/06/03/17/35/shoes-1433925_960_720.jpg'\n    },\n    {\n        'id': 8,\n        'name': 'Tênis Casual Branco',\n        'price': 12500.00,\n        'category': 'Calçados Femininos',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/19/18/06/feet-1840619_960_720.jpg'\n    },\n    {\n        'id': 9,\n        'name': 'Sapato Social Feminino',\n        'price': 14000.00,\n        'category': 'Calçados Femininos',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    \n    # Roupas Femininas\n    {\n        'id': 10,\n        'name': 'Calça Leggings Jeans',\n        'price': 10300.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/08/29/people-2563491_960_720.jpg'\n    },\n    {\n        'id': 11,\n        'name': 'Calça Simples Jeans',\n        'price': 10000.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/13/14/attractive-1869761_960_720.jpg'\n    },\n    {\n        'id': 12,\n        'name': 'Calção Listrado',\n        'price': 3800.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/08/29/people-2563491_960_720.jpg'\n    },\n    {\n        'id': 13,\n        'name': 'Calça Cintura Subida Flare',\n        'price': 15960.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/13/14/attractive-1869761_960_720.jpg'\n    },\n    {\n        'id': 14,\n        'name': 'Calças Estampadas',\n        'price': 14500.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/08/29/people-2563491_960_720.jpg'\n    },\n    {\n        'id': 15,\n        'name': 'Vestido Casual Verão',\n        'price': 18000.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/13/14/attractive-1869761_960_720.jpg'\n    },\n    {\n        'id': 16,\n        'name': 'Blusa Social Feminina',\n        'price': 12500.00,\n        'category': 'Roupas Femininas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/08/29/people-2563491_960_720.jpg'\n    },\n    \n    # Bolsas\n    {\n        'id': 17,\n        'name': 'Bolsa de Mão Couro',\n        'price': 25000.00,\n        'category': 'Bolsas',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/12/45/bag-1869682_960_720.jpg'\n    },\n    {\n        'id': 18,\n        'name': 'Carteira Feminina Elegante',\n        'price': 8500.00,\n        'category': 'Bolsas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    {\n        'id': 19,\n        'name': 'Mochila Casual Urbana',\n        'price': 15000.00,\n        'category': 'Bolsas',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/12/45/bag-1869682_960_720.jpg'\n    },\n    {\n        'id': 20,\n        'name': 'Bolsa Tiracolo Moderna',\n        'price': 18500.00,\n        'category': 'Bolsas',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    \n    # Acessórios\n    {\n        'id': 21,\n        'name': 'Colar Dourado Delicado',\n        'price': 12000.00,\n        'category': 'Acessórios',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    {\n        'id': 22,\n        'name': 'Brincos Pérola Clássicos',\n        'price': 15500.00,\n        'category': 'Acessórios',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/12/51/makeup-1869435_960_720.jpg'\n    },\n    {\n        'id': 23,\n        'name': 'Relógio Feminino Elegante',\n        'price': 35000.00,\n        'category': 'Acessórios',\n        'image': 'https://cdn.pixabay.com/photo/2017/08/01/11/48/woman-2564660_960_720.jpg'\n    },\n    {\n        'id': 24,\n        'name': 'Óculos de Sol Fashion',\n        'price': 22000.00,\n        'category': 'Acessórios',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/29/12/51/makeup-1869435_960_720.jpg'\n    },\n    \n    # Calçados Infantis\n    {\n        'id': 25,\n        'name': 'Tênis Infantil Colorido',\n        'price': 8500.00,\n        'category': 'Calçados Infantis',\n        'image': 'https://cdn.pixabay.com/photo/2016/06/03/17/35/shoes-1433925_960_720.jpg'\n    },\n    {\n        'id': 26,\n        'name': 'Sandália Infantil Confortável',\n        'price': 6500.00,\n        'category': 'Calçados Infantis',\n        'image': 'https://cdn.pixabay.com/photo/2016/11/19/18/06/feet-1840619_960_720.jpg'\n    },\n    {\n        'id': 27,\n        'name': 'Sapatinho de Bebê',\n        'price': 4500.00,\n        'category': 'Calçados Infantis',\n        'image': 'https://cdn.pixabay.com/photo/2016/06/03/17/35/shoes-1433925_960_720.jpg'\n    },\n    \n    # Produtos e acessórios de cabelo\n    {\n        'id': 28,\n        'name': 'Shampoo Nutritivo 500ml',\n        'price': 9500.00,\n        'category': 'Produtos e acessórios de cabelo',\n        'image': 'https://cdn.pixabay.com/photo/2017/09/07/08/54/money-2724241_960_720.jpg'\n    },\n    {\n        'id': 29,\n        'name': 'Condicionador Hidratante',\n        'price': 8500.00,\n        'category': 'Produtos e acessórios de cabelo',\n        'image': 'https://cdn.pixabay.com/photo/2020/05/18/16/17/social-media-5187243_960_720.png'\n    },\n    {\n        'id': 30,\n        'name': 'Escova de Cabelo Premium',\n        'price': 12000.00,\n        'category': 'Produtos e acessórios de cabelo',\n        'image': 'https://cdn.pixabay.com/photo/2017/09/07/08/54/money-2724241_960_720.jpg'\n    },\n    {\n        'id': 31,\n        'name': 'Presilhas Decorativas Kit',\n        'price': 5500.00,\n        'category': 'Produtos e acessórios de cabelo',\n        'image': 'https://cdn.pixabay.com/photo/2020/05/18/16/17/social-media-5187243_960_720.png'\n    },\n    {\n        'id': 32,\n        'name': 'Óleo Capilar Reparador',\n        'price': 15500.00,\n        'category': 'Produtos e acessórios de cabelo',\n        'image': 'https://cdn.pixabay.com/photo/2017/09/07/08/54/money-2724241_960_720.jpg'\n    }\n]\n\nCATEGORIES = [\n    'Acessórios',\n    'Bolsas', \n    'Calçados Femininos',\n    'Calçados Infantis',\n    'Cosméticos',\n    'Produtos e acessórios de cabelo',\n    'Roupas Femininas'\n]\n\n@app.route('/')\ndef index():\n    search_query = request.args.get('search', '').lower()\n    category_filter = request.args.get('category', '')\n    page = request.args.get('page', 1, type=int)\n    per_page = 8  # 8 products per page\n    \n    # Get products from database\n    all_products_data = get_products(page=1, per_page=1000)  # Get all products for homepage\n    db_products = all_products_data['products']\n    \n    # Convert database products to match PRODUCTS format for compatibility\n    filtered_products = []\n    for p in db_products:\n        if p['is_active']:  # Only show active products\n            product = {\n                'id': p['id'],\n                'name': p['name'],\n                'price': p['price'],\n                'category': p['category'],\n                'image': p['image_url'] if p['image_url'] else 'https://via.placeholder.com/300x250?text=Sem+Imagem',\n                'stock_quantity': p['stock_quantity']\n            }\n            filtered_products.append(product)\n    \n    # Apply search filter\n    if search_query:\n        filtered_products = [p for p in filtered_products if search_query in p['name'].lower()]\n    \n    # Apply category filter\n    if category_filter:\n        filtered_products = [p for p in filtered_products if p['category'] == category_filter]\n    \n    # Pagination\n    total_products = len(filtered_products)\n    total_pages = (total_products + per_page - 1) // per_page\n    start_index = (page - 1) * per_page\n    end_index = start_index + per_page\n    paginated_products = filtered_products[start_index:end_index]\n    \n    # Calculate cart totals and prepare cart items\n    cart_total = 0\n    cart_count = 0\n    cart_items = []\n    for product_id, quantity in session.get('cart', {}).items():\n        # Get product from database\n        db_product = get_product_by_id(int(product_id))\n        if db_product and db_product['is_active']:\n            product = {\n                'id': db_product['id'],\n                'name': db_product['name'],\n                'price': db_product['price'],\n                'category': db_product['category'],\n                'image': db_product['image_url'] if db_product['image_url'] else 'https://via.placeholder.com/300x250?text=Sem+Imagem'\n            }\n            cart_total += product['price'] * quantity\n            cart_count += quantity\n            cart_items.append({\n                'product': product,\n                'quantity': quantity\n            })\n    \n    return render_template('index.html', \n                         products=paginated_products,\n                         categories=CATEGORIES,\n                         cart_total=cart_total,\n                         cart_count=cart_count,\n                         cart_items=cart_items,\n                         current_search=request.args.get('search', ''),\n                         current_category=category_filter,\n                         current_page=page,\n                         total_pages=total_pages,\n                         total_products=total_products)\n\n@app.route('/add_to_cart', methods=['POST'])\ndef add_to_cart():\n    product_id = request.form.get('product_id')\n    quantity = int(request.form.get('quantity', 1))\n    \n    if 'cart' not in session:\n        session['cart'] = {}\n    \n    if product_id in session['cart']:\n        session['cart'][product_id] += quantity\n    else:\n        session['cart'][product_id] = quantity\n    \n    session.modified = True\n    \n    # If it's an AJAX request, return JSON\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        # Calculate new cart totals\n        cart_total = 0\n        cart_count = 0\n        for pid, qty in session.get('cart', {}).items():\n            db_product = get_product_by_id(int(pid))\n            if db_product and db_product['is_active']:\n                cart_total += db_product['price'] * qty\n                cart_count += qty\n        \n        return jsonify({\n            'success': True,\n            'cart_total': cart_total,\n            'cart_count': cart_count,\n            'message': f'Produto adicionado ao carrinho!'\n        })\n    \n    return redirect(url_for('index'))\n\n@app.route('/update_cart_quantity', methods=['POST'])\ndef update_cart_quantity():\n    data = request.get_json()\n    product_id = str(data.get('product_id'))\n    action = data.get('action')\n    \n    if 'cart' not in session:\n        session['cart'] = {}\n    \n    if product_id in session['cart']:\n        if action == 'increase':\n            session['cart'][product_id] += 1\n        elif action == 'decrease':\n            session['cart'][product_id] -= 1\n            if session['cart'][product_id] <= 0:\n                del session['cart'][product_id]\n        elif action == 'remove':\n            del session['cart'][product_id]\n    \n    session.modified = True\n    \n    # Calculate new cart totals\n    cart_total = 0\n    cart_count = 0\n    cart_items = []\n    \n    for pid, qty in session.get('cart', {}).items():\n        db_product = get_product_by_id(int(pid))\n        if db_product and db_product['is_active']:\n            item_total = db_product['price'] * qty\n            cart_total += item_total\n            cart_count += qty\n            cart_items.append({\n                'id': db_product['id'],\n                'name': db_product['name'],\n                'price': db_product['price'],\n                'quantity': qty,\n                'total': item_total\n            })\n    \n    return jsonify({\n        'success': True,\n        'cart_total': cart_total,\n        'cart_count': cart_count,\n        'cart_items': cart_items\n    })\n\n@app.route('/clear_cart', methods=['POST'])\ndef clear_cart():\n    session['cart'] = {}\n    session.modified = True\n    \n    # If it's an AJAX request, return JSON\n    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n        return jsonify({\n            'success': True,\n            'message': 'Carrinho limpo com sucesso!'\n        })\n    \n    return redirect(url_for('index'))\n\n@app.route('/get_cart_items')\ndef get_cart_items():\n    cart_items = []\n    for product_id, quantity in session.get('cart', {}).items():\n        db_product = get_product_by_id(int(product_id))\n        if db_product and db_product['is_active']:\n            cart_items.append({\n                'id': db_product['id'],\n                'name': db_product['name'],\n                'price': db_product['price'],\n                'quantity': quantity,\n                'total': db_product['price'] * quantity\n            })\n    \n    return jsonify({\n        'success': True,\n        'cart_items': cart_items\n    })\n\n@app.route('/checkout')\ndef checkout():\n    cart_items = []\n    cart_total = 0\n    \n    for product_id, quantity in session.get('cart', {}).items():\n        db_product = get_product_by_id(int(product_id))\n        if db_product and db_product['is_active']:\n            product = {\n                'id': db_product['id'],\n                'name': db_product['name'],\n                'price': db_product['price'],\n                'category': db_product['category'],\n                'image': db_product['image_url'] if db_product['image_url'] else 'https://via.placeholder.com/300x250?text=Sem+Imagem'\n            }\n            item_total = product['price'] * quantity\n            cart_items.append({\n                'product': product,\n                'quantity': quantity,\n                'total': item_total\n            })\n            cart_total += item_total\n    \n    return render_template('checkout.html', cart_items=cart_items, cart_total=cart_total)\n\n@app.route('/finalizar')\ndef finalizar():\n    cart_items = []\n    cart_total = 0\n    cart_count = 0\n    \n    for product_id, quantity in session.get('cart', {}).items():\n        db_product = get_product_by_id(int(product_id))\n        if db_product and db_product['is_active']:\n            product = {\n                'id': db_product['id'],\n                'name': db_product['name'],\n                'price': db_product['price'],\n                'category': db_product['category'],\n                'image': db_product['image_url'] if db_product['image_url'] else 'https://via.placeholder.com/300x250?text=Sem+Imagem'\n            }\n            item_total = product['price'] * quantity\n            cart_items.append({\n                'product': product,\n                'quantity': quantity,\n                'total': item_total\n            })\n            cart_total += item_total\n            cart_count += quantity\n    \n    # Get bank details for payment information\n    bank_details = get_bank_details()\n    \n    return render_template('finalizar.html', cart_items=cart_items, cart_total=cart_total, cart_count=cart_count, bank_details=bank_details)\n\n@app.route('/process_order', methods=['POST'])\ndef process_order():\n    try:\n        # Get form data\n        customer_name = request.form.get('customer_name')\n        customer_phone = request.form.get('customer_phone')\n        customer_email = request.form.get('customer_email')\n        customer_nif = request.form.get('customer_nif', '')\n        delivery_method = request.form.get('delivery_method')\n        payment_method = request.form.get('payment_method')\n        delivery_address = request.form.get('delivery_address', '')\n        observations = request.form.get('observations', '')\n        \n        # Validate required fields\n        if not all([customer_name, customer_phone, customer_email, delivery_method, payment_method]):\n            return jsonify({'success': False, 'message': 'Campos obrigatórios em falta'})\n        \n        # Calculate cart total and get items\n        cart_items = []\n        cart_total = 0\n        \n        for product_id, quantity in session.get('cart', {}).items():\n            db_product = get_product_by_id(int(product_id))\n            if db_product and db_product['is_active']:\n                item_total = db_product['price'] * quantity\n                cart_items.append({\n                    'product_id': db_product['id'],\n                    'product_name': db_product['name'],\n                    'product_price': db_product['price'],\n                    'quantity': quantity,\n                    'subtotal': item_total\n                })\n                cart_total += item_total\n        \n        if not cart_items:\n            return jsonify({'success': False, 'message': 'Carrinho vazio'})\n        \n        # Create order\n        order = Order(\n            customer_name=customer_name,\n            customer_phone=customer_phone,\n            customer_email=customer_email,\n            customer_nif=customer_nif,\n            delivery_method=delivery_method,\n            payment_method=payment_method,\n            total_amount=cart_total,\n            delivery_address=delivery_address,\n            observations=observations,\n            status='pending'\n        )\n        \n        db.session.add(order)\n        db.session.flush()  # Get the order ID\n        \n        # Create order items\n        for item in cart_items:\n            order_item = OrderItem(\n                order_id=order.id,\n                product_id=item['product_id'],\n                product_name=item['product_name'],\n                product_price=item['product_price'],\n                quantity=item['quantity'],\n                subtotal=item['subtotal']\n            )\n            db.session.add(order_item)\n        \n        db.session.commit()\n        \n        # Clear cart\n        session['cart'] = {}\n        session.modified = True\n        \n        return jsonify({\n            'success': True, \n            'message': 'Pedido criado com sucesso!',\n            'order_id': order.id\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'message': f'Erro ao processar pedido: {str(e)}'})\n\n# ===== ADMIN PANEL ROUTES =====\n\n@app.route('/admin/login', methods=['GET', 'POST'])\ndef admin_login():\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        \n        user = User.query.filter_by(username=username).first()\n        if user and user.check_password(password):\n            login_user(user)\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('admin_dashboard'))\n        else:\n            flash('Credenciais inválidas. Tente novamente.', 'error')\n    \n    return render_template('admin/login.html')\n\n@app.route('/admin/logout')\n@login_required\ndef admin_logout():\n    logout_user()\n    flash('Logout realizado com sucesso.', 'success')\n    return redirect(url_for('admin_login'))\n\n@app.route('/admin')\n@app.route('/admin/dashboard')\n@login_required\ndef admin_dashboard():\n    stats = get_dashboard_stats()\n    return render_template('admin/dashboard.html', stats=stats)\n\n@app.route('/admin/products')\n@login_required\ndef admin_products():\n    page = request.args.get('page', 1, type=int)\n    products_data = get_products(page=page, per_page=10)\n    categories = get_categories()\n    return render_template('admin/products.html', \n                         products=products_data['products'], \n                         pagination=products_data['pagination'],\n                         categories=categories)\n\n@app.route('/admin/products/add', methods=['GET', 'POST'])\n@login_required\ndef admin_add_product():\n    if request.method == 'POST':\n        name = request.form['name']\n        price = float(request.form['price'])\n        category = request.form['category']\n        description = request.form['description']\n        stock_quantity = int(request.form['stock_quantity'])\n        \n        # Handle image upload\n        image_url = ''\n        if 'image' in request.files:\n            file = request.files['image']\n            if file.filename != '' and allowed_file(file.filename):\n                # Create unique filename\n                filename = str(uuid.uuid4()) + '.' + file.filename.rsplit('.', 1)[1].lower()\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                file.save(filepath)\n                image_url = f'/static/images/products/{filename}'\n        \n        product_id = add_product(name, price, category, image_url, description, stock_quantity)\n        if product_id:\n            flash('Produto adicionado com sucesso!', 'success')\n            return redirect(url_for('admin_products'))\n        else:\n            flash('Erro ao adicionar produto.', 'error')\n    \n    categories = get_categories()\n    return render_template('admin/add_product.html', categories=categories)\n\n@app.route('/admin/products/edit/<int:product_id>', methods=['GET', 'POST'])\n@login_required\ndef admin_edit_product(product_id):\n    product = get_product_by_id(product_id)\n    if not product:\n        flash('Produto não encontrado.', 'error')\n        return redirect(url_for('admin_products'))\n    \n    if request.method == 'POST':\n        name = request.form['name']\n        price = float(request.form['price'])\n        category = request.form['category']\n        description = request.form['description']\n        stock_quantity = int(request.form['stock_quantity'])\n        is_active = 'is_active' in request.form\n        \n        # Handle image upload\n        image_url = product['image_url']  # Keep existing image by default\n        if 'image' in request.files:\n            file = request.files['image']\n            if file.filename != '' and allowed_file(file.filename):\n                # Delete old image if exists\n                if image_url and image_url.startswith('/static/images/products/'):\n                    old_filepath = image_url[1:]  # Remove leading slash\n                    if os.path.exists(old_filepath):\n                        os.remove(old_filepath)\n                \n                # Create unique filename\n                filename = str(uuid.uuid4()) + '.' + file.filename.rsplit('.', 1)[1].lower()\n                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n                file.save(filepath)\n                image_url = f'/static/images/products/{filename}'\n        \n        if update_product(product_id, name, price, category, image_url, description, stock_quantity, is_active):\n            flash('Produto atualizado com sucesso!', 'success')\n            return redirect(url_for('admin_products'))\n        else:\n            flash('Erro ao atualizar produto.', 'error')\n    \n    categories = get_categories()\n    return render_template('admin/edit_product.html', product=product, categories=categories)\n\n@app.route('/admin/products/delete/<int:product_id>', methods=['POST'])\n@login_required\ndef admin_delete_product(product_id):\n    if delete_product(product_id):\n        flash('Produto excluído com sucesso!', 'success')\n    else:\n        flash('Erro ao excluir produto.', 'error')\n    return redirect(url_for('admin_products'))\n\n@app.route('/admin/orders')\n@login_required\ndef admin_orders():\n    page = request.args.get('page', 1, type=int)\n    orders_data = get_orders(page=page, per_page=10)\n    return render_template('admin/orders.html', \n                         orders=orders_data['orders'], \n                         pagination=orders_data['pagination'])\n\n@app.route('/admin/settings', methods=['GET', 'POST'])\n@login_required\ndef admin_settings():\n    if request.method == 'POST':\n        bank_name = request.form['bank_name']\n        iban = request.form['iban']\n        account_number = request.form['account_number']\n        account_holder = request.form['account_holder']\n        nif = request.form['nif']\n        \n        if update_bank_details(bank_name, iban, account_number, account_holder, nif):\n            flash('Dados bancários atualizados com sucesso!', 'success')\n        else:\n            flash('Erro ao atualizar dados bancários.', 'error')\n        \n        return redirect(url_for('admin_settings'))\n    \n    bank_details = get_bank_details()\n    return render_template('admin/settings.html', bank_details=bank_details)\n\n@app.route('/admin/orders/update_status/<int:order_id>', methods=['POST'])\n@login_required\ndef admin_update_order_status(order_id):\n    status = request.form['status']\n    if update_order_status(order_id, status):\n        flash('Status do pedido atualizado com sucesso!', 'success')\n    else:\n        flash('Erro ao atualizar status do pedido.', 'error')\n    return redirect(url_for('admin_orders'))\n\n@app.route('/admin/orders/delete/<int:order_id>', methods=['POST'])\n@login_required\ndef admin_delete_order(order_id):\n    if delete_order(order_id):\n        flash('Pedido excluído com sucesso!', 'success')\n    else:\n        flash('Erro ao excluir pedido.', 'error')\n    return redirect(url_for('admin_orders'))\n\n@app.route('/update_cart', methods=['POST'])\ndef update_cart():\n    product_id = request.form.get('product_id')\n    action = request.form.get('action')\n    \n    if 'cart' not in session:\n        session['cart'] = {}\n    \n    if product_id in session['cart']:\n        if action == 'increase':\n            session['cart'][product_id] += 1\n        elif action == 'decrease':\n            session['cart'][product_id] -= 1\n            if session['cart'][product_id] <= 0:\n                del session['cart'][product_id]\n        elif action == 'remove':\n            del session['cart'][product_id]\n    \n    session.modified = True\n    return redirect(url_for('index'))\n","size_bytes":27799},"static/css/ecommerce-theme.css":{"content":"/* NC Glamour Store - E-commerce Theme */\n:root {\n  /* Primary Green - from logo */\n  --primary-green: #5a7a5a;\n  --primary-green-light: #7a9a7a;\n  --primary-green-dark: #4a6a4a;\n  \n  /* Gold/Champagne - from logo */\n  --accent-gold: #d4af37;\n  --accent-gold-light: #f4cf57;\n  --accent-gold-dark: #b8941f;\n  \n  /* Neutral colors for e-commerce */\n  --neutral-dark: #2c3e50;\n  --neutral-medium: #34495e;\n  --neutral-light: #ecf0f1;\n  --neutral-white: #ffffff;\n  \n  /* Success and error colors */\n  --success-color: #27ae60;\n  --error-color: #e74c3c;\n  --warning-color: #f39c12;\n  --info-color: #3498db;\n  \n  /* Text colors */\n  --text-primary: #2c3e50;\n  --text-secondary: #7f8c8d;\n  --text-light: #bdc3c7;\n}\n\n/* Global Styles */\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  color: var(--text-primary);\n  background-color: #f8f9fa;\n}\n\n/* Header and Navigation */\n.navbar {\n  background-color: var(--primary-green) !important;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.navbar-brand {\n  color: var(--accent-gold) !important;\n  font-weight: bold;\n  font-size: 1.5rem;\n}\n\n.navbar-nav .nav-link {\n  color: var(--neutral-white) !important;\n  transition: color 0.3s ease;\n}\n\n.navbar-nav .nav-link:hover {\n  color: var(--accent-gold) !important;\n}\n\n/* Logo Styles */\n.logo-container {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.logo-image {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 2px solid var(--accent-gold);\n}\n\n/* Buttons */\n.btn-primary {\n  background-color: var(--primary-green);\n  border-color: var(--primary-green);\n  transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n  background-color: var(--primary-green-dark);\n  border-color: var(--primary-green-dark);\n  transform: translateY(-1px);\n}\n\n.btn-success {\n  background-color: var(--accent-gold);\n  border-color: var(--accent-gold);\n  color: var(--neutral-dark);\n}\n\n.btn-success:hover {\n  background-color: var(--accent-gold-dark);\n  border-color: var(--accent-gold-dark);\n  color: var(--neutral-white);\n}\n\n.btn-outline-primary {\n  color: var(--primary-green);\n  border-color: var(--primary-green);\n}\n\n.btn-outline-primary:hover {\n  background-color: var(--primary-green);\n  border-color: var(--primary-green);\n}\n\n/* Product Cards */\n.card {\n  border: none;\n  border-radius: 15px;\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n}\n\n.card-img-top {\n  border-radius: 15px 15px 0 0;\n  height: 250px;\n  object-fit: cover;\n}\n\n.card-title {\n  color: var(--neutral-dark);\n  font-weight: 600;\n}\n\n.card-text {\n  color: var(--text-secondary);\n}\n\n/* Price styling */\n.price {\n  color: var(--accent-gold-dark);\n  font-weight: bold;\n  font-size: 1.2rem;\n}\n\n/* Cart Styles */\n.cart-badge {\n  background-color: var(--error-color);\n  color: white;\n  border-radius: 50%;\n  padding: 2px 6px;\n  font-size: 0.8rem;\n  position: absolute;\n  top: -8px;\n  right: -8px;\n}\n\n.cart-item {\n  border-bottom: 1px solid var(--neutral-light);\n  padding: 15px 0;\n}\n\n.cart-item:last-child {\n  border-bottom: none;\n}\n\n/* Category Pills */\n.category-pill {\n  background-color: var(--primary-green-light);\n  color: white;\n  border-radius: 25px;\n  padding: 8px 16px;\n  text-decoration: none;\n  transition: all 0.3s ease;\n  display: inline-block;\n  margin: 5px;\n}\n\n.category-pill:hover {\n  background-color: var(--primary-green-dark);\n  color: white;\n  text-decoration: none;\n  transform: scale(1.05);\n}\n\n.category-pill.active {\n  background-color: var(--accent-gold);\n  color: var(--neutral-dark);\n}\n\n/* Forms */\n.form-control:focus {\n  border-color: var(--primary-green);\n  box-shadow: 0 0 0 0.2rem rgba(90, 122, 90, 0.25);\n}\n\n.form-select:focus {\n  border-color: var(--primary-green);\n  box-shadow: 0 0 0 0.2rem rgba(90, 122, 90, 0.25);\n}\n\n/* Admin Panel Specific */\n.admin-sidebar {\n  background-color: var(--neutral-dark);\n  min-height: 100vh;\n}\n\n.admin-sidebar .nav-link {\n  color: var(--neutral-light);\n  border-radius: 10px;\n  margin: 5px 0;\n  transition: all 0.3s ease;\n}\n\n.admin-sidebar .nav-link:hover {\n  background-color: var(--primary-green);\n  color: white;\n}\n\n.admin-sidebar .nav-link.active {\n  background-color: var(--accent-gold);\n  color: var(--neutral-dark);\n}\n\n/* Statistics Cards */\n.stat-card {\n  background: linear-gradient(135deg, var(--primary-green), var(--primary-green-dark));\n  color: white;\n  border-radius: 15px;\n  padding: 20px;\n}\n\n.stat-card.gold {\n  background: linear-gradient(135deg, var(--accent-gold), var(--accent-gold-dark));\n  color: var(--neutral-dark);\n}\n\n.stat-card.success {\n  background: linear-gradient(135deg, var(--success-color), #219a52);\n}\n\n.stat-card.info {\n  background: linear-gradient(135deg, var(--info-color), #2980b9);\n}\n\n/* Alerts */\n.alert-success {\n  background-color: rgba(39, 174, 96, 0.1);\n  border-color: var(--success-color);\n  color: var(--success-color);\n}\n\n.alert-danger {\n  background-color: rgba(231, 76, 60, 0.1);\n  border-color: var(--error-color);\n  color: var(--error-color);\n}\n\n/* Footer */\n.footer {\n  background-color: var(--neutral-dark);\n  color: var(--neutral-light);\n  padding: 40px 0 20px 0;\n}\n\n.footer h5 {\n  color: var(--accent-gold);\n}\n\n.footer a {\n  color: var(--neutral-light);\n  text-decoration: none;\n  transition: color 0.3s ease;\n}\n\n.footer a:hover {\n  color: var(--accent-gold);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .logo-image {\n    width: 40px;\n    height: 40px;\n  }\n  \n  .navbar-brand {\n    font-size: 1.2rem;\n  }\n  \n  .card-img-top {\n    height: 200px;\n  }\n}\n\n/* Loading Animation */\n.loading {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid rgba(255,255,255,.3);\n  border-radius: 50%;\n  border-top-color: var(--accent-gold);\n  animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* Quantity Controls */\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.quantity-controls button {\n  border-radius: 50%;\n  width: 35px;\n  height: 35px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 2px solid var(--primary-green);\n  background-color: transparent;\n  color: var(--primary-green);\n  transition: all 0.3s ease;\n}\n\n.quantity-controls button:hover {\n  background-color: var(--primary-green);\n  color: white;\n}\n\n.quantity-display {\n  min-width: 40px;\n  text-align: center;\n  font-weight: bold;\n}\n\n/* Image Upload Area */\n.image-upload-area {\n  border: 2px dashed var(--primary-green);\n  border-radius: 15px;\n  padding: 40px;\n  text-align: center;\n  background-color: rgba(90, 122, 90, 0.05);\n  transition: all 0.3s ease;\n}\n\n.image-upload-area:hover {\n  border-color: var(--accent-gold);\n  background-color: rgba(212, 175, 55, 0.05);\n}\n\n.image-upload-area.dragover {\n  border-color: var(--accent-gold);\n  background-color: rgba(212, 175, 55, 0.1);\n}","size_bytes":6907},"static/css/style.css":{"content":"/* Custom Styles for Nc Glamourstore */\n\n:root {\n    --primary-color: var(--primary-green);\n    --primary-green: #5a7a5a;\n    --secondary-color: #f8f9fa;\n    --accent-color: #28a745;\n    --text-color: #333;\n    --border-color: #dee2e6;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f8f9fa;\n    color: var(--text-color);\n}\n\n/* Header Styles */\nheader {\n    background: linear-gradient(135deg, var(--primary-green) 0%, #4a6a4a 100%) !important;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* Sidebar Styles */\n.sidebar {\n    min-height: calc(100vh - 200px);\n    border-right: 2px solid var(--border-color);\n    background-color: white !important;\n}\n\n.sidebar h5 {\n    color: var(--primary-green);\n    border-bottom: 2px solid var(--primary-green);\n    padding-bottom: 0.5rem;\n}\n\n/* Product Card Styles */\n.product-card {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    border: 1px solid var(--border-color);\n    height: 100%;\n}\n\n.product-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n}\n\n.product-image {\n    height: 200px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.product-card:hover .product-image {\n    transform: scale(1.05);\n}\n\n.price {\n    font-size: 1.2rem;\n    color: var(--primary-green) !important;\n}\n\n/* Cart Widget Styles */\n.cart-widget .card {\n    border: 2px solid var(--primary-green);\n    box-shadow: 0 4px 12px rgba(90, 122, 90, 0.15);\n}\n\n.cart-widget .card-body {\n    background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);\n}\n\n/* Button Styles */\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-green) 0%, #4a6a4a 100%);\n    border: none;\n    transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, #3a5a3a 0%, #2a4a2a 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(90, 122, 90, 0.3);\n}\n\n.btn-success {\n    background: linear-gradient(135deg, var(--accent-color) 0%, #20c997 100%);\n    border: none;\n}\n\n.btn-success:hover {\n    background: linear-gradient(135deg, #1e7e34 0%, #1a9974 100%);\n    transform: translateY(-2px);\n}\n\n/* List Group Styles */\n.list-group-item.active {\n    background-color: var(--primary-green);\n    border-color: var(--primary-green);\n}\n\n.list-group-item:hover {\n    background-color: #f8fff8;\n}\n\n/* Form Styles */\n.form-control:focus {\n    border-color: var(--primary-green);\n    box-shadow: 0 0 0 0.2rem rgba(90, 122, 90, 0.25);\n}\n\n.form-select:focus {\n    border-color: var(--primary-green);\n    box-shadow: 0 0 0 0.2rem rgba(90, 122, 90, 0.25);\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        border-right: none;\n        border-bottom: 2px solid var(--border-color);\n        margin-bottom: 2rem;\n    }\n    \n    .product-card {\n        margin-bottom: 1rem;\n    }\n    \n    header h1 {\n        font-size: 2rem;\n    }\n    \n    header h5 {\n        font-size: 1.1rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .col-sm-6 {\n        flex: 0 0 auto;\n        width: 50%;\n    }\n    \n    .product-image {\n        height: 150px;\n    }\n    \n    .card-title {\n        font-size: 0.9rem;\n    }\n}\n\n/* Animation for cart updates */\n.cart-widget {\n    transition: all 0.3s ease;\n}\n\n.cart-widget:hover {\n    transform: scale(1.02);\n}\n\n/* Table Styles for Checkout */\n.table th {\n    background-color: var(--secondary-color);\n    color: var(--primary-green);\n    font-weight: 600;\n}\n\n.table-active th {\n    background-color: var(--primary-green);\n    color: white;\n}\n\n/* Alert Styles */\n.alert-info {\n    background-color: #e7f8e7;\n    border-color: var(--primary-green);\n    color: #2d5a2d;\n}\n\n/* Loading Animation */\n.btn:active {\n    transform: scale(0.98);\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--primary-green);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #4a6a4a;\n}\n\n/* Categories scroll styling */\n.categories-scroll::-webkit-scrollbar {\n    width: 6px;\n}\n\n.categories-scroll::-webkit-scrollbar-track {\n    background: #f8f9fa;\n}\n\n.categories-scroll::-webkit-scrollbar-thumb {\n    background: var(--primary-green);\n    border-radius: 3px;\n}\n\n/* Pagination Styles */\n.pagination .page-link {\n    color: var(--primary-green);\n    border-color: var(--border-color);\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--primary-green);\n    border-color: var(--primary-green);\n}\n\n.pagination .page-link:hover {\n    color: #4a6a4a;\n    background-color: #f8fff8;\n    border-color: var(--primary-green);\n}\n\n/* Quantity Controls */\n.quantity-input {\n    max-width: 60px;\n    background-color: white !important;\n}\n\n.quantity-btn {\n    border-color: var(--border-color) !important;\n    color: var(--primary-green) !important;\n}\n\n.quantity-btn:hover {\n    background-color: var(--primary-green) !important;\n    color: white !important;\n    border-color: var(--primary-green) !important;\n}\n\n/* Finalizar page specific styles */\n.card-header {\n    border-bottom: 2px solid var(--primary-green);\n}\n\n.form-check-input:checked {\n    background-color: var(--primary-green);\n    border-color: var(--primary-green);\n}\n\n/* Footer styles */\nfooter {\n    background: linear-gradient(135deg, #343a40 0%, #495057 100%) !important;\n}\n\nfooter a {\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\nfooter a:hover {\n    color: var(--primary-green) !important;\n}\n\n/* Enhanced card hover effects */\n.card {\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n}\n\n/* Loading states */\n.btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n/* Cart items styling */\n.cart-item {\n    background-color: #f8f9fa;\n    border: 1px solid #dee2e6 !important;\n    transition: all 0.3s ease;\n}\n\n.cart-item:hover {\n    background-color: #e9ecef;\n    border-color: var(--primary-green) !important;\n}\n\n.cart-item .quantity-display {\n    font-weight: bold;\n    color: var(--primary-green);\n    min-width: 20px;\n    text-align: center;\n}\n\n.cart-item .cart-quantity-btn {\n    width: 28px;\n    height: 28px;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-color: var(--primary-green) !important;\n    color: var(--primary-green) !important;\n}\n\n.cart-item .cart-quantity-btn:hover {\n    background-color: var(--primary-green) !important;\n    color: white !important;\n}\n\n.cart-item h6 {\n    font-size: 0.85rem;\n    margin-bottom: 0.25rem;\n}\n\n.cart-item small {\n    font-size: 0.75rem;\n}\n\n/* Cart items list styling */\n#cart-items-list {\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n#cart-items-list::-webkit-scrollbar {\n    width: 4px;\n}\n\n#cart-items-list::-webkit-scrollbar-track {\n    background: #f8f9fa;\n}\n\n#cart-items-list::-webkit-scrollbar-thumb {\n    background: var(--primary-green);\n    border-radius: 2px;\n}\n\n/* Alert positioning */\n.alert.position-fixed {\n    top: 20px !important;\n    right: 20px !important;\n    z-index: 9999 !important;\n    max-width: 300px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n/* Delivery address form styling */\n#delivery-address-form {\n    margin-top: 1rem;\n    animation: slideDown 0.3s ease-in-out;\n}\n\n@keyframes slideDown {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Modal styling improvements */\n.modal-content {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 10px 40px rgba(0,0,0,0.15);\n}\n\n.modal-header.bg-success {\n    border-radius: 12px 12px 0 0;\n}\n\n.modal-body .card {\n    border-radius: 8px;\n}\n\n.modal-body .fas.fa-shopping-bag {\n    animation: bounce 1s ease-in-out;\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-10px);\n    }\n    60% {\n        transform: translateY(-5px);\n    }\n}\n\n/* Form validation styling */\n.form-control:invalid {\n    border-color: #dc3545;\n}\n\n.form-control:valid {\n    border-color: #28a745;\n}\n\n/* Button loading state */\n.btn-loading {\n    position: relative;\n    pointer-events: none;\n}\n\n.btn-loading:after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    margin: auto;\n    border: 2px solid transparent;\n    border-top-color: #ffffff;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n/* Delivery method cards */\n.form-check-input:checked ~ .form-check-label {\n    font-weight: bold;\n    color: var(--primary-green);\n}\n","size_bytes":8774},"static/js/cart.js":{"content":"// Cart functionality for Nc Glamourstore\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize cart functionality\n    initializeCart();\n    \n    // Add smooth scrolling to checkout button\n    const checkoutBtn = document.querySelector('a[href*=\"checkout\"]');\n    if (checkoutBtn) {\n        checkoutBtn.addEventListener('click', function(e) {\n            // Add a slight delay for better UX\n            this.style.transform = 'scale(0.95)';\n            setTimeout(() => {\n                this.style.transform = 'scale(1)';\n            }, 150);\n        });\n    }\n    \n    // Quantity controls functionality\n    const quantityBtns = document.querySelectorAll('.quantity-btn');\n    quantityBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const action = this.getAttribute('data-action');\n            const input = this.closest('.input-group').querySelector('.quantity-input');\n            let currentValue = parseInt(input.value);\n            \n            const maxQuantity = parseInt(input.getAttribute('max')) || 10;\n            if (action === 'increase' && currentValue < maxQuantity) {\n                input.value = currentValue + 1;\n            } else if (action === 'decrease' && currentValue > 1) {\n                input.value = currentValue - 1;\n            }\n            \n            // Add visual feedback\n            input.style.backgroundColor = '#e7f8e7';\n            setTimeout(() => {\n                input.style.backgroundColor = '';\n            }, 300);\n        });\n    });\n    \n    // Add quantity change animations\n    const quantitySelects = document.querySelectorAll('select[name=\"quantity\"]');\n    quantitySelects.forEach(select => {\n        select.addEventListener('change', function() {\n            this.style.backgroundColor = '#e7f8e7';\n            setTimeout(() => {\n                this.style.backgroundColor = '';\n            }, 300);\n        });\n    });\n    \n    // Add product card hover effects\n    const productCards = document.querySelectorAll('.product-card');\n    productCards.forEach(card => {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-5px)';\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n    \n    // Add to cart functionality with AJAX\n    const addToCartForms = document.querySelectorAll('form[action*=\"add_to_cart\"]');\n    addToCartForms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const submitBtn = this.querySelector('button[type=\"submit\"]');\n            const originalText = submitBtn.innerHTML;\n            \n            // Visual feedback\n            submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Adicionando...';\n            submitBtn.disabled = true;\n            \n            // Send AJAX request\n            fetch('/add_to_cart', {\n                method: 'POST',\n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    updateCartDisplay(data.cart_total, data.cart_count);\n                    showSuccessMessage(data.message);\n                    \n                    // Get updated cart items via another request\n                    fetch('/get_cart_items', {\n                        method: 'GET',\n                        headers: {\n                            'X-Requested-With': 'XMLHttpRequest'\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(cartData => {\n                        updateCartItemsList(cartData.cart_items);\n                    });\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                showErrorMessage('Erro ao adicionar produto ao carrinho');\n            })\n            .finally(() => {\n                submitBtn.innerHTML = originalText;\n                submitBtn.disabled = false;\n            });\n        });\n    });\n    \n    // Cart quantity controls\n    const cartQuantityBtns = document.querySelectorAll('.cart-quantity-btn');\n    cartQuantityBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const action = this.getAttribute('data-action');\n            const productId = this.getAttribute('data-product-id');\n            \n            updateCartQuantity(productId, action);\n        });\n    });\n    \n    // Search input enhancement\n    const searchInput = document.querySelector('input[name=\"search\"]');\n    if (searchInput) {\n        searchInput.addEventListener('focus', function() {\n            this.parentElement.style.boxShadow = '0 0 0 0.2rem rgba(90, 122, 90, 0.25)';\n        });\n        \n        searchInput.addEventListener('blur', function() {\n            this.parentElement.style.boxShadow = '';\n        });\n    }\n    \n    // Category link animations\n    const categoryLinks = document.querySelectorAll('.list-group-item');\n    categoryLinks.forEach(link => {\n        link.addEventListener('click', function() {\n            // Add loading state\n            if (!this.classList.contains('active')) {\n                const icon = document.createElement('i');\n                icon.className = 'fas fa-spinner fa-spin ms-2';\n                this.appendChild(icon);\n            }\n        });\n    });\n});\n\nfunction initializeCart() {\n    // Cart counter animation\n    const cartCounter = document.querySelector('.cart-widget');\n    if (cartCounter) {\n        // Add pulse animation when cart is updated\n        const observer = new MutationObserver(function(mutations) {\n            mutations.forEach(function(mutation) {\n                if (mutation.type === 'childList') {\n                    cartCounter.style.animation = 'pulse 0.5s ease-in-out';\n                    setTimeout(() => {\n                        cartCounter.style.animation = '';\n                    }, 500);\n                }\n            });\n        });\n        \n        observer.observe(cartCounter, { childList: true, subtree: true });\n    }\n    \n    // Clear cart confirmation\n    const clearCartBtn = document.querySelector('button[onclick*=\"confirm\"]');\n    if (clearCartBtn) {\n        clearCartBtn.addEventListener('click', function(e) {\n            if (!confirm('Tem certeza que deseja limpar todo o carrinho?')) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n\n// Utility function for formatting currency\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat('pt-AO', {\n        style: 'currency',\n        currency: 'AOA',\n        minimumFractionDigits: 2\n    }).format(amount);\n}\n\n// Function to update cart display\nfunction updateCartDisplay(total, count) {\n    const cartTotalElement = document.getElementById('cart-total');\n    const cartCountElement = document.getElementById('cart-count');\n    \n    if (cartTotalElement) {\n        cartTotalElement.textContent = new Intl.NumberFormat('pt-PT', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        }).format(total);\n    }\n    \n    if (cartCountElement) {\n        cartCountElement.textContent = count;\n    }\n    \n    // Add animation to cart widget\n    const cartWidget = document.querySelector('.cart-widget');\n    if (cartWidget) {\n        cartWidget.style.animation = 'pulse 0.5s ease-in-out';\n        setTimeout(() => {\n            cartWidget.style.animation = '';\n        }, 500);\n    }\n}\n\n// Function to update cart quantities\nfunction updateCartQuantity(productId, action) {\n    fetch('/update_cart_quantity', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: JSON.stringify({\n            product_id: productId,\n            action: action\n        })\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            updateCartDisplay(data.cart_total, data.cart_count);\n            updateCartItemsList(data.cart_items);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        showErrorMessage('Erro ao atualizar carrinho');\n    });\n}\n\n// Function to update cart items list\nfunction updateCartItemsList(cartItems) {\n    const cartItemsList = document.getElementById('cart-items-list');\n    if (!cartItemsList) return;\n    \n    cartItemsList.innerHTML = '';\n    \n    cartItems.forEach(item => {\n        const cartItemDiv = document.createElement('div');\n        cartItemDiv.className = 'cart-item mb-2 p-2 border rounded';\n        cartItemDiv.setAttribute('data-product-id', item.id);\n        \n        cartItemDiv.innerHTML = `\n            <div class=\"d-flex justify-content-between align-items-center\">\n                <div class=\"flex-grow-1\">\n                    <h6 class=\"mb-1 small\">${item.name}</h6>\n                    <small class=\"text-muted\">${new Intl.NumberFormat('pt-PT', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                    }).format(item.price)} Kz cada</small>\n                </div>\n                <div class=\"quantity-controls d-flex align-items-center\">\n                    <button type=\"button\" class=\"btn btn-outline-secondary btn-sm cart-quantity-btn\" \n                            data-action=\"decrease\" data-product-id=\"${item.id}\">\n                        <i class=\"fas fa-minus\"></i>\n                    </button>\n                    <span class=\"mx-2 quantity-display\">${item.quantity}</span>\n                    <button type=\"button\" class=\"btn btn-outline-secondary btn-sm cart-quantity-btn\" \n                            data-action=\"increase\" data-product-id=\"${item.id}\">\n                        <i class=\"fas fa-plus\"></i>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        cartItemsList.appendChild(cartItemDiv);\n    });\n    \n    // Re-attach event listeners to new buttons\n    const newQuantityBtns = cartItemsList.querySelectorAll('.cart-quantity-btn');\n    newQuantityBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const action = this.getAttribute('data-action');\n            const productId = this.getAttribute('data-product-id');\n            updateCartQuantity(productId, action);\n        });\n    });\n}\n\n// Function to clear cart\nfunction clearCart() {\n    if (!confirm('Tem certeza que deseja limpar todo o carrinho?')) {\n        return;\n    }\n    \n    fetch('/clear_cart', {\n        method: 'POST',\n        headers: {\n            'X-Requested-With': 'XMLHttpRequest'\n        }\n    })\n    .then(() => {\n        updateCartDisplay(0, 0);\n        updateCartItemsList([]);\n        showSuccessMessage('Carrinho limpo com sucesso!');\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        showErrorMessage('Erro ao limpar carrinho');\n    });\n}\n\n// Function to show success messages\nfunction showSuccessMessage(message) {\n    const alert = document.createElement('div');\n    alert.className = 'alert alert-success alert-dismissible fade show position-fixed';\n    alert.style.top = '20px';\n    alert.style.right = '20px';\n    alert.style.zIndex = '9999';\n    alert.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(alert);\n    \n    // Auto remove after 3 seconds\n    setTimeout(() => {\n        if (alert.parentNode) {\n            alert.parentNode.removeChild(alert);\n        }\n    }, 3000);\n}\n\n// Function to show error messages\nfunction showErrorMessage(message) {\n    const alert = document.createElement('div');\n    alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';\n    alert.style.top = '20px';\n    alert.style.right = '20px';\n    alert.style.zIndex = '9999';\n    alert.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(alert);\n    \n    // Auto remove after 3 seconds\n    setTimeout(() => {\n        if (alert.parentNode) {\n            alert.parentNode.removeChild(alert);\n        }\n    }, 3000);\n}\n\n// Smooth scroll to top function\nfunction scrollToTop() {\n    window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n    });\n}\n\n// Add CSS animation keyframes dynamically\nconst style = document.createElement('style');\nstyle.textContent = `\n    @keyframes pulse {\n        0% { transform: scale(1); }\n        50% { transform: scale(1.05); }\n        100% { transform: scale(1); }\n    }\n`;\ndocument.head.appendChild(style);\n","size_bytes":12941},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}},"version":1}